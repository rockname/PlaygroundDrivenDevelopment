//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
public struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  public static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  public struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  public struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  public struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  public struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  public struct nib {
    /// Nib `EmptyTableViewCell`.
    public static let emptyTableViewCell = _R.nib._EmptyTableViewCell()
    /// Nib `TwitterTableViewCell`.
    public static let twitterTableViewCell = _R.nib._TwitterTableViewCell()
    
    /// `UINib(name: "EmptyTableViewCell", in: bundle)`
    public static func emptyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyTableViewCell)
    }
    
    /// `UINib(name: "TwitterTableViewCell", in: bundle)`
    public static func twitterTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.twitterTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  public struct reuseIdentifier {
    /// Reuse identifier `EmptyTableViewCell`.
    public static let emptyTableViewCell: Rswift.ReuseIdentifier<EmptyTableViewCell> = Rswift.ReuseIdentifier(identifier: "EmptyTableViewCell")
    /// Reuse identifier `TwitterTableViewCell`.
    public static let twitterTableViewCell: Rswift.ReuseIdentifier<TwitterTableViewCell> = Rswift.ReuseIdentifier(identifier: "TwitterTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  public struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  public struct storyboard {
    /// Storyboard `Twitter`.
    public static let twitter = _R.storyboard.twitter()
    
    /// `UIStoryboard(name: "Twitter", bundle: ...)`
    public static func twitter(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.twitter)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  public struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 6 localization keys.
    public struct localizable {
      /// en translation: %#@days@
      /// 
      /// Locales: en, ja
      public static let dDaySAgo = Rswift.StringResource(key: "%d day(s) ago", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: %#@hours@
      /// 
      /// Locales: en, ja
      public static let dHourSAgo = Rswift.StringResource(key: "%d hour(s) ago", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: %#@minutes@
      /// 
      /// Locales: en, ja
      public static let dMinuteSAgo = Rswift.StringResource(key: "%d minute(s) ago", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: %#@seconds@
      /// 
      /// Locales: en, ja
      public static let dSecondSAgo = Rswift.StringResource(key: "%d second(s) ago", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Home
      /// 
      /// Locales: en, ja
      public static let home = Rswift.StringResource(key: "home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: No statuses here. Let's post anything you think！
      /// 
      /// Locales: en, ja
      public static let empty = Rswift.StringResource(key: "empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      
      /// en translation: %#@days@
      /// 
      /// Locales: en, ja
      public static func dDaySAgo(days value1: Int) -> String {
        return String(format: NSLocalizedString("%d day(s) ago", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %#@hours@
      /// 
      /// Locales: en, ja
      public static func dHourSAgo(hours value1: Int) -> String {
        return String(format: NSLocalizedString("%d hour(s) ago", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %#@minutes@
      /// 
      /// Locales: en, ja
      public static func dMinuteSAgo(minutes value1: Int) -> String {
        return String(format: NSLocalizedString("%d minute(s) ago", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %#@seconds@
      /// 
      /// Locales: en, ja
      public static func dSecondSAgo(seconds value1: Int) -> String {
        return String(format: NSLocalizedString("%d second(s) ago", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Home
      /// 
      /// Locales: en, ja
      public static func home(_: Void = ()) -> String {
        return NSLocalizedString("home", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No statuses here. Let's post anything you think！
      /// 
      /// Locales: en, ja
      public static func empty(_: Void = ()) -> String {
        return NSLocalizedString("empty", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

public struct _R {
  public struct nib {
    public struct _EmptyTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      public typealias ReusableType = EmptyTableViewCell
      
      public let bundle = R.hostingBundle
      public let identifier = "EmptyTableViewCell"
      public let name = "EmptyTableViewCell"
      
      public func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EmptyTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmptyTableViewCell
      }
      
      fileprivate init() {}
    }
    
    public struct _TwitterTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      public typealias ReusableType = TwitterTableViewCell
      
      public let bundle = R.hostingBundle
      public let identifier = "TwitterTableViewCell"
      public let name = "TwitterTableViewCell"
      
      public func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TwitterTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TwitterTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  public struct storyboard {
    public struct twitter: Rswift.StoryboardResourceWithInitialControllerType {
      public typealias InitialController = TwitterTableViewController
      
      public let bundle = R.hostingBundle
      public let name = "Twitter"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
