//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` public struct is generated and contains references to static resources.
public struct R: Rswift.Validatable {
  filestatic public let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  filestatic public let hostingBundle = Bundle(for: R.Class.self)
  
  static public func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` public struct is generated, and contains static references to 0 colors.
  public struct color {
    fileinit() {}
  }
  
  /// This `R.file` public struct is generated, and contains static references to 0 files.
  public struct file {
    fileinit() {}
  }
  
  /// This `R.font` public struct is generated, and contains static references to 0 fonts.
  public struct font {
    fileinit() {}
  }
  
  /// This `R.image` public struct is generated, and contains static references to 3 images.
  public struct image {
    /// Image `koushien`.
    static public let koushien = Rswift.ImageResource(bundle: R.hostingBundle, name: "koushien")
    /// Image `rockname`.
    static public let rockname = Rswift.ImageResource(bundle: R.hostingBundle, name: "rockname")
    /// Image `unknown`.
    static public let unknown = Rswift.ImageResource(bundle: R.hostingBundle, name: "unknown")
    
    /// `UIImage(named: "koushien", bundle: ..., traitCollection: ...)`
    static public func koushien(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.koushien, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rockname", bundle: ..., traitCollection: ...)`
    static public func rockname(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rockname, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unknown", bundle: ..., traitCollection: ...)`
    static public func unknown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unknown, compatibleWith: traitCollection)
    }
    
    fileinit() {}
  }
  
  /// This `R.nib` public struct is generated, and contains static references to 2 nibs.
  public struct nib {
    /// Nib `EmptyTableViewCell`.
    static public let emptyTableViewCell = _R.nib._EmptyTableViewCell()
    /// Nib `TwitterTableViewCell`.
    static public let twitterTableViewCell = _R.nib._TwitterTableViewCell()
    
    /// `UINib(name: "EmptyTableViewCell", in: bundle)`
    static public func emptyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyTableViewCell)
    }
    
    /// `UINib(name: "TwitterTableViewCell", in: bundle)`
    static public func twitterTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.twitterTableViewCell)
    }
    
    fileinit() {}
  }
  
  /// This `R.reuseIdentifier` public struct is generated, and contains static references to 2 reuse identifiers.
  public struct reuseIdentifier {
    /// Reuse identifier `EmptyTableViewCell`.
    static public let emptyTableViewCell: Rswift.ReuseIdentifier<EmptyTableViewCell> = Rswift.ReuseIdentifier(identifier: "EmptyTableViewCell")
    /// Reuse identifier `TwitterTableViewCell`.
    static public let twitterTableViewCell: Rswift.ReuseIdentifier<TwitterTableViewCell> = Rswift.ReuseIdentifier(identifier: "TwitterTableViewCell")
    
    fileinit() {}
  }
  
  /// This `R.segue` public struct is generated, and contains static references to 0 view controllers.
  public struct segue {
    fileinit() {}
  }
  
  /// This `R.storyboard` public struct is generated, and contains static references to 1 storyboards.
  public struct storyboard {
    /// Storyboard `Twitter`.
    static public let twitter = _R.storyboard.twitter()
    
    /// `UIStoryboard(name: "Twitter", bundle: ...)`
    static public func twitter(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.twitter)
    }
    
    fileinit() {}
  }
  
  /// This `R.string` public struct is generated, and contains static references to 0 localization tables.
  public struct string {
    fileinit() {}
  }
  
  filepublic struct intern: Rswift.Validatable {
    filestatic public func validate() throws {
      // There are no resources to validate
    }
    
    fileinit() {}
  }
  
  fileclass Class {}
  
  fileinit() {}
}

public struct _R {
  public struct nib {
    public struct _EmptyTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EmptyTableViewCell
      
      public let bundle = R.hostingBundle
      let identifier = "EmptyTableViewCell"
      let name = "EmptyTableViewCell"
      
      public func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EmptyTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmptyTableViewCell
      }
      
      fileinit() {}
    }
    
    public struct _TwitterTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TwitterTableViewCell
      
      public let bundle = R.hostingBundle
      let identifier = "TwitterTableViewCell"
      let name = "TwitterTableViewCell"
      
      public func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TwitterTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TwitterTableViewCell
      }
      
      fileinit() {}
    }
    
    fileinit() {}
  }
  
  public struct storyboard {
    public struct twitter: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = TwitterTableViewController
      
      public let bundle = R.hostingBundle
      let name = "Twitter"
      
      fileinit() {}
    }
    
    fileinit() {}
  }
  
  fileinit() {}
}
